- @display_hi_res_action = true

- if @media_entries
  = form_tag update_permissions_resource_path(0), :method => :put do
    = hidden_field_tag :media_entry_ids, @media_entries.map(&:id).join(',')
    = render :partial => "permissions/table" #mongo#, :locals => {:cancel_path => "javascript:history.back(1);"}
- elsif @resource and @resource.is_a?(Media::Entry)
  = form_tag update_permissions_resource_path(@resource), :method => :put do
    = render :partial => "permissions/table" #mongo#, :locals => {:cancel_path => media_entry_path(@resource) }
- else
  - @display_hi_res_action = false
  = form_tag update_permissions_resource_path(@resource), :method => :put do
    = render :partial => "permissions/table" #mongo#, :locals => {:cancel_path => media_set_path(@resource) }


%script#new_permission{:type => "text/x-jquery-tmpl"}
  %tr
    %td
      ${name}    
    %td{:style => "{{if (view == 'mixed')}}background: url(/assets/stripe_1.png){{/if}}"}
      %input{:name => "{{if (type == 'nil')}}subject[${type}][view]{{else}}subject[${type}][${id}][view]{{/if}}", :type => "hidden", :value => "false"}
      <input name="{{if (type == 'nil')}}subject[${type}][view]{{else}}subject[${type}][${id}][view]{{/if}}" type="checkbox" value="true" {{if view}}checked="checked"{{/if}}>
    %td{:style => "{{if (edit == 'mixed')}}background: url(/assets/stripe_1.png){{/if}}"}
      %input{:name => "{{if (type == 'nil')}}subject[${type}][edit]{{else}}subject[${type}][${id}][edit]{{/if}}", :type => "hidden", :value => "false"}
      <input name="{{if (type == 'nil')}}subject[${type}][edit]{{else}}subject[${type}][${id}][edit]{{/if}}" type="checkbox" value="true" {{if edit}}checked="checked"{{/if}}>
    - if @display_hi_res_action
      %td{:style => "{{if (hi_res == 'mixed')}}background: url(/assets/stripe_1.png){{/if}}"}
        %input{:name => "{{if (type == 'nil')}}subject[${type}][hi_res]{{else}}subject[${type}][${id}][hi_res]{{/if}}", :type => "hidden", :value => "false"}
        <input name="{{if (type == 'nil')}}subject[${type}][hi_res]{{else}}subject[${type}][${id}][hi_res]{{/if}}" type="checkbox" value="true" {{if hi_res}}checked="checked"{{/if}}>
    %td
      {{if manage}}
      %input{:type => :checkbox, :checked => :checked, :disabled => :disabled}
      {{/if}}
    %td
      {{if type != 'nil' && id != "#{current_user.id}" }}
      = link_to _("LÃ¶schen"), "#", :class => "delete", :msg => _("Sind Sie sicher?"), :"data-id" => "${id}", :"data-type" => "${type}"
      {{/if}}  

:javascript
  $(function() {
    var permissions = #{@permissions_json};

    if (permissions.Person != undefined) $('#user_permissions').html($("#new_permission").tmpl(permissions.Person)); 
    var selected_user_ids = (permissions.Person != undefined) ? $.map(permissions.Person, function(elem, i){ return elem.id; }) : new Array();
    
    if (permissions.Group != undefined) $('#group_permissions').html($("#new_permission").tmpl(permissions.Group)); 
    var selected_group_ids = (permissions.Group != undefined) ? $.map(permissions.Group, function(elem, i){ return elem.id; }) : new Array();

    $('#anyone_permissions').html($("#new_permission").tmpl(permissions.public));


    $("input#new_user").autocomplete({
      source: function(request, response){
        $.ajax({
    			url: '/users',
    			data: {term: request.term},
    			dataType: 'json',
    			type: "get",
    			success: function(data){
    			  var unselected_options = data.filter(function(elem) { 
    			    var i = selected_user_ids.indexOf(elem.id);
    			    if (i == -1) return elem;
    			  });
            response($.ui.autocomplete.filter(unselected_options, request.term));
    			}
    		});
      },
      minLength: 3,
      select: function(event, ui) {
        var data = {type: 'User', id: ui.item.id, name: ui.item.label, view: false, edit: false, hi_res: false }
        $('#user_permissions').append($("#new_permission").tmpl(data)).effect('highlight');
        selected_user_ids.push(ui.item.id);
      }, 
      close: function(event, ui) {
        $(this).val("");
      }
    });
    
    $("input#new_group").autocomplete({
      source: function(request, response){
        $.ajax({
    			url: '/groups',
    			data: {term: request.term},
    			dataType: 'json',
    			type: "get",
    			success: function(data){
    			  var unselected_options = data.filter(function(elem) { 
    			    var i = selected_group_ids.indexOf(elem.id);
    			    if (i == -1) return elem;
    			  });
            response($.ui.autocomplete.filter(unselected_options, request.term));
    			}
    		});
      },
      minLength: 3,
      select: function(event, ui) {
        var data = {type: 'Group', id: ui.item.id, name: ui.item.label, view: false, edit: false, hi_res: false }
        $('#group_permissions').append($("#new_permission").tmpl(data)).effect('highlight');
        selected_group_ids.push(ui.item.id);
      }, 
      close: function(event, ui) {
        $(this).val("");
      }
    });

    // TODO override jquery_ujs.js data-method and data-confirm
    $(".permissions a.delete[msg]").live('click', function(){
      var element = $(this);
      var message = element.attr('msg');
      if(confirm(message)){
        var id = element.data("id");
        var type_arr = (element.data("type") == "Group") ? selected_group_ids : selected_user_ids
        var i = type_arr.indexOf(id);
        type_arr.splice(i, 1);
        var to_remove = element.closest("tr");
        to_remove.fadeOut('slow', function() {
          to_remove.remove();
        });
      }
      return false;
    });
  });

