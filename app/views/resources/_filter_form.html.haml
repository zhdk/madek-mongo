.filter_box
  %h3.filter_category.filter_header.clearfix
    = link_to "Suchergebnisse filtern", "#", :class => "filter_category_link"
  .filter_content{:style => "display: block;"}
    %form{:action => filter_resources_path, :method => :post, :"data-remote" => "true", :"data-type" => :json, :"data-item_ids" => resource_ids.to_json}
      = hidden_field_tag "filter[ids]", resource_ids.join(',')
      #filter-query.basic
        %div
          - if type == "MediaEntry"
            = hidden_field_tag "query", params[:query]
            %h3.filter_category.clearfix
              = link_to "Medientyp und Format", "#", :class => "filter_category_link"
              %span.ui-icon.ui-icon-triangle-1-e
            .filter_content{:style => "display: none;"}
              %h5.filter_subcategory.filter_category.clearfix
                %span.input_wrapper
                  = check_box_tag "#{type}[media_type][]", "Image"
                  Bild
              .filter_content
                %ul
                  %li
                    = label_tag "#{type}[orientation][0]", "Querformat"
                    = check_box_tag "#{type}[orientation]", '0'
                  %li
                    = label_tag "#{type}[orientation][1]", "Hochformat"
                    = check_box_tag "#{type}[orientation]", '1'
                %ul
                  %li
                    = label_tag "#{type}[width][value]", "Breite:"
                    = select_tag "#{type}[width][operator]", options_for_select({'ist genau' => 'is', 'grösser als' => 'gt', 'kleiner als' => 'lt'}, :selected => nil), :include_blank => true
                    = text_field_tag "#{type}[width][value]", nil, :size => 5
                    %span
                      Pixel
                    / TODO #slider-range
                  %li
                    = label_tag "#{type}[height][value]", "Höhe:"
                    = select_tag "#{type}[height][operator]", options_for_select({'ist genau' => 'is', 'grösser als' => 'gt', 'kleiner als' => 'lt'}, :selected => nil), :include_blank => true
                    = text_field_tag "#{type}[height][value]", nil, :size => 5
                    %span
                      Pixel

          = display_meta_data_checkboxes(resource_ids)
        .filter_footer
          = submit_tag _("Filter anwenden (%d)") % resource_ids.count, :title => "Filtern", :id => 'filter-submit', :name => nil

:javascript
  $(document).ready(function () { 
    //#mongo# setupBatch(#{@media_entries.to_json});    

    //#mongo# $('#detail_specification').tabs();
    
    $('.filter_box h3.filter_category a.filter_category_link').click(function() {
      var icon = $(this).siblings('span.ui-icon');
      var to_toggle = $(this).parent().next('.filter_content');

      to_toggle.toggle();
      if (to_toggle.is(":visible")) {
        icon.removeClass('ui-icon-triangle-1-e').addClass('ui-icon-triangle-1-s');
      } else {
        icon.removeClass('ui-icon-triangle-1-s').addClass('ui-icon-triangle-1-e');
      };
      return false;
    });

    var checkboxes = $(".filter_content input[data-item_ids]:checkbox");
    checkboxes.change(function(){
      var parent_form = $(this).closest("form");
      var sibling_checkboxes = parent_form.find("input[data-item_ids]:checkbox");
      var intersected_ids = parent_form.data('item_ids');
      sibling_checkboxes.filter(":checked").each(function(i, elem){
        var a = $(elem).data('item_ids');
        intersected_ids = (i ? intersected_ids.intersect(a) : a );
      });
      sibling_checkboxes.each(function(){
        var that = $(this);
        var a = that.data('item_ids');
        if(intersected_ids) a = intersected_ids.intersect(a);
        that.next(".total_ids").html(a.length);
        if(a.length){
          that.closest("li").removeClass("disabled");
          that.removeAttr("disabled");
        }else{
          that.closest("li").addClass("disabled");
          that.attr("disabled", "disabled");
        }
      });
      var submit_value = "Filter anwenden";
      if(intersected_ids) submit_value += " ("+intersected_ids.length+")";
      parent_form.find(".filter_footer #filter-submit").val(submit_value);
      parent_form.find("input#filter_ids").val(intersected_ids.join(','));
    });

    $(".filter_content form").live('ajax:complete.rails', function(xhr, response){ // TODO ajax:success ??
      var json = JSON.parse(response.responseText);
      var container = $("#results");
      container.empty();
      display_results(json, container);
    });
    
    /* TODO
    $( "#slider-range" ).slider({
      range: true,
      min: 0,
      max: 500,
      values: [ 75, 300 ],
      slide: function( event, ui ) {
      }
    });
    */
  });
